"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = _interopRequireWildcard(require("enzyme"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _index = _interopRequireDefault(require("./index.js"));

var _server = _interopRequireDefault(require("react-dom/server"));

_enzyme.default.configure({
  adapter: new _enzymeAdapterReact.default()
}); // const trigger = (i, e) => i.instance().i.dispatchEvent(new Event(e))


test('render with no opts', function () {
  expect((0, _enzyme.shallow)(_react.default.createElement(_index.default, null)).html()).toEqual(null);
});
test('render with src string, after load', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: "foo"
  }));
  i.setState({
    isLoaded: true
  });
  expect(i.html()).toEqual('<img src="foo"/>');
});
test('render with src array', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: ['foo']
  }));
  i.setState({
    isLoaded: true
  });
  expect(i.html()).toEqual('<img src="foo"/>');
});
test('render with decode=true', function () {
  var img = new Image();

  img.decode = function () {
    return Promise.resolve();
  };

  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: "fooDecode",
    mockImage: img
  })); // run on next tick

  return Promise.resolve().then(function () {
    i.update();
    setTimeout(function () {
      return expect(i.html()).toEqual('<img src="fooDecode"/>');
    }, 100);
  });
});
test('fallback to next image', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: ['foo', 'bar']
  }));
  i.setState({
    currentIndex: i.state('currentIndex') + 1,
    isLoaded: true
  });
  expect(i.html()).toEqual('<img src="bar"/>');
});
test('ensure missing image isnt renderer to browser', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: ['foo', 'bar']
  }));
  i.setState({
    currentIndex: i.state('currentIndex') + 2
  });
  expect(i.html()).toEqual(null);
});
test('show loader', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: "foo",
    loader: _react.default.createElement("span", null, "Loading...")
  }));
  expect(i.html()).toEqual('<span>Loading...</span>');
});
test('clear loader after load', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: "foo",
    loader: _react.default.createElement("span", null, "Loading...")
  }));
  expect(i.html()).toEqual('<span>Loading...</span>');
  i.setState({
    isLoading: false,
    isLoaded: true
  });
  expect(i.html()).toEqual('<img src="foo"/>');
});
test('show unloader', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    unloader: _react.default.createElement("span", null, "Could not load image!")
  }));
  i.setState({
    isLoading: false,
    isLoaded: false
  });
  expect(i.html()).toEqual('<span>Could not load image!</span>');
});
test('cache already loaded successfully', function () {
  var i = new _index.default({
    src: 'foo'
  });
  i.onLoad();
  var j = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: "foo"
  }));
  expect(j.state()).toEqual({
    currentIndex: 0,
    isLoading: false,
    isLoaded: true
  });
});
test('destroy image on unmount', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: "foo1"
  }));
  var inst = i.instance();
  inst.componentDidMount();
  i.unmount();
  expect(inst.i).toEqual(undefined);
});
test('componentDidMount start loading', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: "foo2"
  }));
  var inst = i.instance();
  inst.componentDidMount();
  expect(inst.i.src).toEqual('http://localhost/foo2');
});
test('componentWillReceiveProps', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: "foo"
  }));
  i.setProps({
    src: 'bar'
  });
  expect(i.state()).toEqual({
    currentIndex: 0,
    isLoading: true,
    isLoaded: false
  });
});
test('componentWillReceiveProps no change', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: "foo"
  }));
  i.setProps({
    src: 'foo'
  });
  expect(i.state()).toEqual({
    currentIndex: 0,
    isLoading: false,
    isLoaded: true
  });
});
test('componentWillReceiveProps no src', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: "foo"
  }));
  i.setProps({
    src: ''
  });
  expect(i.state()).toEqual({
    currentIndex: 0,
    isLoading: false,
    isLoaded: false
  });
});
test('onLoad sets state to loaded', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: "foo4"
  }));
  var inst = i.instance();
  inst.componentDidMount();
  inst.i.onload();
  expect(i.state('isLoaded')).toEqual(true);
});
test('onError does nothing if unmounted', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: "foo5"
  }));
  var inst = i.instance();
  inst.componentDidMount();
  var img = inst.i;
  i.unmount();
  expect(img.onerror()).toBe(false);
});
test('onError if there are no more sources, we are done', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: "foo7"
  }));
  var inst = i.instance();
  inst.componentDidMount();
  inst.i.onerror();
  expect(i.state()).toEqual({
    currentIndex: 0,
    isLoading: false,
    isLoaded: false
  });
});
test('onError try the next image', function () {
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: ['foo6', 'bar6']
  }));
  var inst = i.instance();
  inst.componentDidMount();
  inst.i.onerror();
  expect(i.state()).toEqual({
    currentIndex: 1,
    isLoading: true,
    isLoaded: false
  });
});
test('onError try the next image. If its cached successfully, skip loading', function () {
  var j = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: "bar8"
  }));
  j.instance().onLoad();
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: ['foo8', 'bar8']
  }));
  var inst = i.instance();
  inst.componentDidMount();
  inst.i.onerror();
  expect(i.state()).toEqual({
    currentIndex: 1,
    isLoading: false,
    isLoaded: true
  });
});
test('onError try the next image. If its cached as error, skip it', function () {
  var j = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: "bar9"
  }));
  j.instance().onError();
  var i = (0, _enzyme.shallow)(_react.default.createElement(_index.default, {
    src: ['foo9', 'bar9']
  }));
  var inst = i.instance();
  inst.componentDidMount();
  inst.i.onerror();
  expect(i.state()).toEqual({
    currentIndex: 0,
    isLoading: false,
    isLoaded: false
  });
});